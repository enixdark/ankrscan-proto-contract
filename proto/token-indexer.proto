syntax = "proto3";

package ankrscan.tokenindexer;

option go_package = "./;proto";

service TokenIndexer {
  rpc BalanceByHolder (BalanceByHolderRequest) returns (BalancesDetailedReply);
}

enum TokenType {
  UNDEFINED = 0;
  NATIVE = 1;
  ERC20 = 2;
}

enum PegType {
  NO_PEG = 0;
  NATIVE_PEG = 1;
  USD_PEG = 2;
}

message BalanceByHolderRequest {
  bytes wallet = 1;
  string blockchain_name = 2;
  bytes page_token = 3;
  int32 page_size = 4;
}

message BalancesDetailedReply {
  repeated BalanceDetailed balances = 1;
  bytes next_page_token = 2;
}

message BalancesReply {
  repeated Balance balances = 1;
  bytes next_page_token = 2;
}

message Balance {
  string blockchain_name = 1;
  bytes contract_address = 2;
  bytes holder_address = 3;
  bytes balance = 4;
}

message BalanceDetailed {
  string blockchain_name = 1;
  bytes contract_address = 2;
  string name = 3;
  uint64 decimals = 4;
  string symbol = 5;
  bytes holder_address = 6;
  bytes balance = 7;
  TokenType type = 8;
}

message CurrencyDetails {
  string blockchain_name = 1;
  bytes address = 2;
  string name = 3;
  uint64 decimals = 4;
  string symbol = 5;
  TokenType type = 8;
  PegType peg_type = 9;
}

message CurrencyRequest {
  string blockchain_name = 1;
  bytes address = 2;
}

message LiquidPoolRequest {
  string blockchain_name = 1;
  bytes address = 2;
}

message LiquidPoolDetails {
  string blockchain_name = 1;
  bytes token0_address = 2;
  bytes token1_address = 3;
  bytes address = 4;
  bytes factory = 5;
}

message UsdPrice {
  string blockchain_name = 1;
  bytes token_address = 2;
  uint64 block_height = 3;
  string price = 4; // human readable float value
}

message TradeExecuted {
  string blockchain_name = 1;
  uint64 block_height = 2;
  uint64 transaction_index = 3;
  uint64 log_index = 4;

  bytes base_token_address = 5;
  bytes quote_token_address = 6;
  string price = 7; // human readable float value
  bytes liquid_pool_address = 9;
}

