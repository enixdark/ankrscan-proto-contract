syntax = "proto3";

package ankrscan.nodeproxy;

option go_package = "./;proto";
import "block-store.proto";

service NodeProxy {
  // configuration management
  rpc NodeConfigs (NodeConfigsRequest) returns (NodeConfigsReply);
  rpc UpdateNodeConfig (UpdateNodeConfigRequest) returns (UpdateNodeConfigReply);

  // microservice API
  rpc BlockByNumber (blockstore.BlockByNumberRequest) returns (blockstore.BlockByNumberReply);
  rpc LatestBlockHeader (blockstore.LatestBlockHeaderRequest) returns (blockstore.LatestBlockHeaderReply);
  rpc CallContract (CallContractBatchRequest) returns (CallContractBatchReply);
}

message NodeConfig {
  uint64 id = 1;
  string blockchain_name = 2;
  string node_url = 3;
  uint64 historical_state_retention_blocks = 4; // 0 for archive node
  uint64 parallel_calls_batch = 5; // how many contract calls will be done in one JSON-RPC batch
  uint64 parallel_calls_workers = 6; // how many parallel workers will send batches to the node
}

message NodeConfigsRequest {
}

message NodeConfigsReply {
  repeated NodeConfig node_configs = 1;
}

message UpdateNodeConfigRequest {
  NodeConfig node_config = 1;
}

message UpdateNodeConfigReply {
}

message CallContractRequest {
  string blockchain_name = 1;
  bytes contract_address = 2;
  bytes argument = 3;
  uint64 block_height = 4;
  string description = 5;
}

message CallContractBatchRequest {
  repeated CallContractRequest calls = 1;
  bool enable_caching = 2;
}

message CallContractBatchReply {
  repeated CallContractReply results = 1;
}

message CallContractReply {
  bytes result = 1;
  string error = 2;
  bool success = 3;
  uint64 block_height = 4;
}
