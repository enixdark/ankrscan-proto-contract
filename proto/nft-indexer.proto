syntax = "proto3";

package ankrscan.nftindexer;

option go_package = "./;proto";

import "google/api/annotations.proto";

service NftIndexer {
  // internal APIs
  rpc NftBalanceByAddress (NftBalanceByAddressRequest) returns (NftBalanceByAddressReply);
  rpc NftGetMetadata (NftGetMetadataRequest) returns (NftGetMetadataReply);

  // public APIs
  rpc GetBalance (GetBalanceRequest) returns (NftBalanceByAddressReply) {
    option (google.api.http) = {
      post: "/v1/nft/getNfts"
      body: "*"
    };
  };

  rpc GetMetadata (GetMetadataRequest) returns (NftGetMetadataReply) {
    option (google.api.http) = {
      post: "/v1/nft/getMetadata"
      body: "*"
    };
  };
}

message GetBalanceRequest {
  string wallet = 1; // wallet address e.g. 0x134acfa283884ae586f96e24d40dd6c894a620bb
  string blockchain_name = 2; // check github.com/ankr-network/ankrscan-proto-contract/go/blockchains/list.go
  string page_token = 3; // field to support pagination
  int32 page_size = 4;
}

message ContractAddressTokenIdFilter{
  bytes contract_address = 1;
  repeated bytes token_ids = 2;
}

message NftBalanceByAddressRequest {
  bytes wallet = 1; // wallet address e.g. 0x134acfa283884ae586f96e24d40dd6c894a620bb
  repeated string blockchain_name = 2; // check github.com/ankr-network/ankrscan-proto-contract/go/blockchains/list.go
  bytes page_token = 3; // field to support pagination
  int32 page_size = 4;
  repeated ContractAddressTokenIdFilter filter = 5;
}

message NftBalanceByAddressReply {
  repeated Nft nfts = 1;
  bytes next_page_token = 2; // field to support pagination
  bytes owner = 3;
}

message GetMetadataRequest {
  string blockchain_name = 1; // check github.com/ankr-network/ankrscan-proto-contract/go/blockchains/list.go
  string contract_address = 2;
  string token_id = 3;
}

message NftGetMetadataRequest {
  string blockchain_name = 1; // check github.com/ankr-network/ankrscan-proto-contract/go/blockchains/list.go
  bytes contract_address = 2;
  bytes token_id = 3;
}

message NftGetMetadataReply {
  NftMetadata metadata = 1;
  NftAttributes attributes = 2;
}

enum NftType {
  UNDEFINED = 0;
  ERC721 = 1;
  ERC1155 = 2;
}

message NftContractDetails {
  string name = 1;
  string symbol = 2;
  NftType nft_type = 3;
}

message Attribute{
  string trait_type = 1;
  string value = 2;
}

message NftAttributes {
  string token_uri = 1;
  string image_uri = 2;
  string name = 3;
  string description = 4;
  repeated Attribute attributes = 5;
  NftType nft_type = 6;
  bool fetched = 7;
}

message NftMetadata {
  string blockchain_name = 1;
  bytes contract_address = 2;
  bytes token_id = 3;
  NftType nft_type = 4;
}

message Nft {
  string blockchain_name = 1;
  string name = 2;
  bytes token_id = 3;
  string token_uri = 4;
  string image_uri = 5;
  string collection_name = 6;
  string symbol = 7;
  NftType nft_type = 8;
  bytes contract_address = 9;
  bytes quantity = 10;
  repeated Attribute traits = 11;
}

message NftTransfer {
  NftMetadata nft_metadata = 1;
  bytes from = 2;
  bytes to = 3;
  bytes value = 4;
  uint64 block_number = 5;
}

message NftBalance {
  NftMetadata nft_metadata = 1;
  bytes wallet = 2;
  bytes value = 3;
}

message NftIndexerConfig {
  uint64 id = 1;
  string blockchain_name = 2;
  int64 latest_processed_block = 3; // set to -1 to start from origin
  string node_url = 4;
  uint64 batch_size = 5;
  uint64 parallel_fetch_count = 6;
}