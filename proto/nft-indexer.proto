syntax = "proto3";

package ankrscan.nftindexer;

option go_package = "./;proto";

service NftIndexer {
  rpc NftBalanceByAddress (NftBalanceByAddressRequest) returns (NftBalanceByAddressReply);
}

message NftBalanceByAddressRequest {
  bytes wallet = 1; // wallet address e.g. 0x134acfa283884ae586f96e24d40dd6c894a620bb
  string blockchain_name = 2; // check https://github.com/Ankr-network/ankrscan-constants
  bytes page_token = 3; // field to support pagination
  int32 page_size = 4;
}

message NftBalanceByAddressReply {
  repeated Nft nfts = 1;
  bytes next_page_token = 2; // field to support pagination
}

enum NftType {
  UNDEFINED = 0;
  ERC721 = 1;
  ERC1155 = 2;
}

message NftContractDetails {
  string name = 1;
  string symbol = 2;
  NftType nft_type = 3;
}

message NftAttributes {
  string token_uri = 1;
}

message NftMetadata {
  string blockchain_name = 1;
  bytes contract_address = 2;
  bytes token_id = 3;
  NftType nft_type = 4;
}

message Nft {
  NftMetadata nft_metadata = 1;
  NftAttributes attributes = 2;
  NftContractDetails contract_details = 3;
}

message NftTransfer {
  NftMetadata nft_metadata = 1;
  bytes from = 2;
  bytes to = 3;
  bytes value = 4;
}

message NftBalance {
  NftMetadata nft_metadata = 1;
  bytes wallet = 2;
  bytes value = 3;
}

message NftIndexerConfig {
  uint64 id = 1;
  string blockchain_name = 2;
  int64 latest_processed_block = 3; // set to -1 to start from origin
  string node_url = 8;
}