syntax = "proto3";

package ankrscan.blockstore;

option go_package = "./;proto";

import "google/api/annotations.proto";

//  ______ _______ _    _
// |  ____|__   __| |  | |
// | |__     | |  | |__| |
// |  __|    | |  |  __  |
// | |____   | |  | |  | |
// |______|  |_|  |_|  |_|
//
//

message EthLog {
  bytes address = 1;
  repeated bytes topics = 2;
  bytes data = 3;
  bool removed = 4;
}

message EthTransaction {
  // eth_getTransactionByHash
  uint64 nonce = 1;
  bytes from = 2;
  bytes to = 3;
  bytes value = 4;
  uint64 gas = 5;
  bytes gas_price = 6;
  bytes input = 7;
  bytes v = 13;
  bytes r = 14;
  bytes s = 15;
  uint64 type = 16;
  // eth_getTransactionReceipt
  bytes contract_address = 8;
  uint64 cumulative_gas_used = 9;
  uint64 gas_used = 10;
  uint64 status = 11;
  repeated EthLog logs = 12;
}

message EthBlock {
  bytes nonce = 4;
  bytes sha3_uncles = 5;
  bytes transactions_root = 6;
  bytes state_root = 7;
  bytes miner = 8;
  bytes difficulty = 9;
  bytes total_difficulty = 10;
  bytes extra_data = 11;
  uint64 size = 12;
  uint64 gas_limit = 13;
  uint64 gas_used = 14;
  repeated bytes uncles = 16;
  bytes receipts_root = 17;
  bytes mix_hash = 18;
  bytes logs_bloom = 19;
}

//  _____   ____ _______
// |  __ \ / __ \__   __|
// | |  | | |  | | | |
// | |  | | |  | | | |
// | |__| | |__| | | |
// |_____/ \____/  |_|
//
//


message DotEvent {
  string method = 1;
  repeated string arguments = 2;
}

message DotTransaction {
  string transaction_hash = 1;
  string method = 2;
  bytes from = 3;
  bytes partial_fee = 4;
  bytes tip_fee = 5;
  bytes transaction_fee = 6;
  uint64 nonce = 12;
  string args_json = 13;
  bool success = 14;
  repeated DotEvent events = 15;
  string value = 16; // retrieved from the args of balance.Transfer transaction
}

message DotBlockHeader {
  uint64 block_height = 1;
  uint64 timestamp = 2;
  string author_id = 3;
  string block_hash = 4;
  string parent_hash = 5;
  string state_root = 6;
  string extrinsic_root = 7;
  uint64 transactions_count = 8;
}

message DotBlock {
  repeated DotTransaction txs = 1;
  DotBlockHeader header = 2;
}

message Transaction {
  bytes transaction_id = 15;
  string blockchain_name = 1;
  bytes block_hash = 2;
  uint64 block_height = 3;
  bytes transaction_hash = 4;
  uint64 transaction_index = 5;
  uint64 timestamp = 6;
  oneof specific {
    EthTransaction eth_tx = 7;
    DotTransaction dot_tx = 8;
  }
}

message BlockHeader {
  bytes block_id = 15;
  string blockchain_name = 1;
  bytes block_hash = 2;
  bytes parent_hash = 3;
  uint64 block_height = 4;
  uint64 transactions_count = 5;
  uint64 timestamp = 6;
  oneof specific {
    EthBlock eth_block = 7;
    DotBlock dot_block = 8;
  }
}

message ExtractorConfig {
  uint64 id = 1;
  string blockchain_name = 2;
  int64 latest_processed_block = 3; // set to -1 to start from origin
  bool enabled = 4;
  uint64 parallel_blocks = 5;
  uint64 parallel_txs_batch = 6;
  uint64 parallel_txs_workers = 7;
  string node_url = 8;
  bool backward = 9;
}

/**
 *  _  __      __ _
 * | |/ /__ _ / _| | ____ _
 * | ' // _` | |_| |/ / _` |
 * | . \ (_| |  _|   < (_| |
 * |_|\_\__,_|_| |_|\_\__,_|
 *
 **/

/**
 * Topic: v1.blockchainextractor.blockchanged
 */
message Block {
  BlockHeader header = 1;
  repeated Transaction transactions = 2;
}

message NodeConfig {
  string blockchain_name = 1;
  string node_url = 2;
}

/**
 * Topic: v1.blockchainextractor.nodechanged
 */
message NodeChanged {
  repeated NodeConfig configs = 3;
}

/**
 * Topic: v1.blockchainextractor.latestchanged
 */
message LatestBlockChanged {
  string blockchain_name = 1;
  uint64 block_height = 2;
}

/**
 *        ____  ____   ____
 *   __ _|  _ \|  _ \ / ___|
 *  / _` | |_) | |_) | |
 * | (_| |  _ <|  __/| |___
 *  \__, |_| \_\_|    \____|
 *  |___/
 *
 **/

service BlockStore {
  // internal APIs
  rpc GetExtractors (GetExtractorsRequest) returns (ExtractorConfigs);
  rpc UpdateExtractors (UpdateExtractorsRequest) returns (ExtractorConfigs);
  rpc DeleteExtractors (DeleteExtractorsRequest) returns (ExtractorConfigs);
  rpc BlockRange (BlockRangeRequest) returns (BlockRangeReply);

  // public APIs
  rpc Next (NextRequest) returns (NextReply) {
    option (google.api.http) = {
      post: "/v1/multichain/consumer/next"
      body: "*"
    };
  };
  rpc Commit (CommitRequest) returns (CommitReply) {
    option (google.api.http) = {
      post: "/v1/multichain/consumer/commit"
      body: "*"
    };
  };
  rpc Seek (SeekRequest) returns (SeekReply){
    option (google.api.http) = {
      post: "/v1/multichain/consumer/seek"
      body: "*"
    };
  };
  rpc LastCommit (LastCommitRequest) returns (LastCommitReply){
    option (google.api.http) = {
      post: "/v1/multichain/consumer/latest"
      body: "*"
    };
  };
  rpc BlocksByNumber(BlocksByNumberRequest) returns (BlocksByNumberReply) {
    option (google.api.http) = {
      post: "/v1/multichain/block/byNumber"
      body: "*"
    };
  };
  rpc LatestBlockHeader (LatestBlockHeaderRequest) returns (LatestBlockHeaderReply) {
    option (google.api.http) = {
      post: "/v1/multichain/block/latest"
      body: "*"
    };
  };

  rpc BlockRangeContinuous (BlockRangeRequest) returns (BlockRangeReply) {
    option (google.api.http) = {
      post: "/v1/multichain/block/range"
      body: "*"
    };
  };

}

message BlockRangeReply {
  repeated Block blocks = 1;
}

message GetExtractorsRequest {

}

message DeleteExtractorsRequest {
  repeated uint64 ids = 1;
}

message UpdateExtractorsRequest {
  repeated ExtractorConfig configs = 1;
  bool update_latest = 2;
}

message ExtractorConfigs {
  repeated ExtractorConfig configs = 1;
}

message GetLatestBalanceRequest {
  string blockchain_name = 1;
  string address = 2;
}

message GetLatestBalanceReply {
  string value = 1;
}

message GetTransactionByHashRequest {
  string blockchain_name = 1;
  string transaction_hash = 2;
}

message GetTransactionByHashReply {
  Transaction details = 1;
}

message GetBlockByHeightRequest {
  string blockchain_name = 1;
  uint64 block_height = 2;
}

message GetBlockByHeightReply {
  Block details = 1;
}

message BlockByNumberAndHashRequest {
  string blockchain_name = 1;
  uint64 block_height = 2;
  bytes block_hash = 3;
}

message BlockByNumberRequest {
  string blockchain_name = 1;
  uint64 block_height = 2;
}

message TransactionByBlockRequest {
  string blockchain_name = 1;
  uint64 block_height = 2;
  bytes block_hash = 3;
}

message TransactionByBlockAndIndexRequest {
  string blockchain_name = 1;
  uint64 block_height = 2;
  bytes block_hash = 3;
  uint64 transaction_index = 4;
}

message TransactionsByBlockAndIndexRequest {
  repeated TransactionByBlockRequest requests = 1;
}

message BlocksByNumberRequest {
  repeated BlockByNumberRequest requests = 1;
}

message BlocksByNumberReply {
  repeated Block blocks = 1;
}

message BlockRangeRequest {
  string blockchain_name = 1;
  uint64 from_block_height = 2;
  uint64 to_block_height = 3;
}

message BlockConsumer {
  string consumer_name = 1;
  string user_id = 2;
  string blockchain_name = 3;
}

message NextRequest {
  BlockConsumer consumer = 1;
  uint64 batch_size = 2;
}

message NextReply {
  repeated Block blocks = 1;
  bool is_reorg = 2;
  BlockHeader commit = 3;
  BlockHeader latest = 4;
}

message CommitRequest {
  BlockConsumer consumer = 1;
  BlockHeader block = 2;
}

message CommitReply {
  BlockHeader committed = 1;
}

message SeekRequest {
  BlockConsumer consumer = 1;
  uint64 block_height = 2;
}

message SeekReply {
  BlockHeader committed = 1;
}

message LastCommitRequest {
  BlockConsumer consumer = 1;
}

message LastCommitReply {
  BlockHeader committed = 1;
  bool exists = 2;
}

message LatestBlockHeaderRequest {
  string blockchain_name = 1;
}

message LatestBlockHeaderReply {
  BlockHeader block = 1;
}