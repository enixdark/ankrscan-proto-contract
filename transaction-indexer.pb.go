// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: transaction-indexer.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TransactionType int32

const (
	TransactionType_DefaultTransaction TransactionType = 0
	TransactionType_ContractDeploy     TransactionType = 1
	TransactionType_ContractCall       TransactionType = 2
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "DefaultTransaction",
		1: "ContractDeploy",
		2: "ContractCall",
	}
	TransactionType_value = map[string]int32{
		"DefaultTransaction": 0,
		"ContractDeploy":     1,
		"ContractCall":       2,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_indexer_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_transaction_indexer_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{0}
}

type SimpleTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName  string          `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	TransactionHash string          `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight     uint64          `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	FromAddress     string          `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress       string          `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value           string          `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp       uint64          `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Success         bool            `protobuf:"varint,8,opt,name=success,proto3" json:"success,omitempty"`
	Method          string          `protobuf:"bytes,9,opt,name=method,proto3" json:"method,omitempty"`
	Id              string          `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Type            TransactionType `protobuf:"varint,11,opt,name=type,proto3,enum=com.clover.extractor.TransactionType" json:"type,omitempty"`
}

func (x *SimpleTransaction) Reset() {
	*x = SimpleTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTransaction) ProtoMessage() {}

func (x *SimpleTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTransaction.ProtoReflect.Descriptor instead.
func (*SimpleTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleTransaction) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *SimpleTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *SimpleTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *SimpleTransaction) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SimpleTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SimpleTransaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SimpleTransaction) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SimpleTransaction) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SimpleTransaction) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SimpleTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SimpleTransaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_DefaultTransaction
}

type MoneyTransferTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName  string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	TransactionHash string `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight     uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	FromAddress     string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress       string `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value           string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp       uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ContractAddress string `protobuf:"bytes,8,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Id              string `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MoneyTransferTransaction) Reset() {
	*x = MoneyTransferTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyTransferTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyTransferTransaction) ProtoMessage() {}

func (x *MoneyTransferTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyTransferTransaction.ProtoReflect.Descriptor instead.
func (*MoneyTransferTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *MoneyTransferTransaction) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *MoneyTransferTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *MoneyTransferTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *MoneyTransferTransaction) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *MoneyTransferTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *MoneyTransferTransaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MoneyTransferTransaction) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MoneyTransferTransaction) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *MoneyTransferTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SimpleBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName    string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	BlockHeight       uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp         uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransactionsCount uint64 `protobuf:"varint,4,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count,omitempty"`
	Id                string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SimpleBlock) Reset() {
	*x = SimpleBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleBlock) ProtoMessage() {}

func (x *SimpleBlock) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleBlock.ProtoReflect.Descriptor instead.
func (*SimpleBlock) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleBlock) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *SimpleBlock) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *SimpleBlock) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SimpleBlock) GetTransactionsCount() uint64 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

func (x *SimpleBlock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTxsByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PageIndex uint32 `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize  uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetTxsByAddressRequest) Reset() {
	*x = GetTxsByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxsByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxsByAddressRequest) ProtoMessage() {}

func (x *GetTxsByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxsByAddressRequest.ProtoReflect.Descriptor instead.
func (*GetTxsByAddressRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *GetTxsByAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTxsByAddressRequest) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetTxsByAddressRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetTxsByAddressAndTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Limit          uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	AfterTimestamp uint64 `protobuf:"varint,3,opt,name=after_timestamp,json=afterTimestamp,proto3" json:"after_timestamp,omitempty"` // get limited amount of transactions by address after timestamp
	AfterId        string `protobuf:"bytes,4,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`
}

func (x *GetTxsByAddressAndTimeRequest) Reset() {
	*x = GetTxsByAddressAndTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxsByAddressAndTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxsByAddressAndTimeRequest) ProtoMessage() {}

func (x *GetTxsByAddressAndTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxsByAddressAndTimeRequest.ProtoReflect.Descriptor instead.
func (*GetTxsByAddressAndTimeRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *GetTxsByAddressAndTimeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTxsByAddressAndTimeRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTxsByAddressAndTimeRequest) GetAfterTimestamp() uint64 {
	if x != nil {
		return x.AfterTimestamp
	}
	return 0
}

func (x *GetTxsByAddressAndTimeRequest) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

type SimpleTransactionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*SimpleTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *SimpleTransactionsReply) Reset() {
	*x = SimpleTransactionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTransactionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTransactionsReply) ProtoMessage() {}

func (x *SimpleTransactionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTransactionsReply.ProtoReflect.Descriptor instead.
func (*SimpleTransactionsReply) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *SimpleTransactionsReply) GetTxs() []*SimpleTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

type MoneyTransfersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*MoneyTransferTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *MoneyTransfersReply) Reset() {
	*x = MoneyTransfersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyTransfersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyTransfersReply) ProtoMessage() {}

func (x *MoneyTransfersReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyTransfersReply.ProtoReflect.Descriptor instead.
func (*MoneyTransfersReply) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *MoneyTransfersReply) GetTxs() []*MoneyTransferTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

type GetTxsByHeightAndBlockchainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	BlockHeight    uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PageIndex      uint32 `protobuf:"varint,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize       uint32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetTxsByHeightAndBlockchainRequest) Reset() {
	*x = GetTxsByHeightAndBlockchainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxsByHeightAndBlockchainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxsByHeightAndBlockchainRequest) ProtoMessage() {}

func (x *GetTxsByHeightAndBlockchainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxsByHeightAndBlockchainRequest.ProtoReflect.Descriptor instead.
func (*GetTxsByHeightAndBlockchainRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *GetTxsByHeightAndBlockchainRequest) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *GetTxsByHeightAndBlockchainRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *GetTxsByHeightAndBlockchainRequest) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetTxsByHeightAndBlockchainRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetBlocksByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *GetBlocksByHeightRequest) Reset() {
	*x = GetBlocksByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksByHeightRequest) ProtoMessage() {}

func (x *GetBlocksByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksByHeightRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlocksByHeightRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type SimpleBlocksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*SimpleBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *SimpleBlocksReply) Reset() {
	*x = SimpleBlocksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleBlocksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleBlocksReply) ProtoMessage() {}

func (x *SimpleBlocksReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleBlocksReply.ProtoReflect.Descriptor instead.
func (*SimpleBlocksReply) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{9}
}

func (x *SimpleBlocksReply) GetBlocks() []*SimpleBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetBlockDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	BlockHeight    uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *GetBlockDetailsRequest) Reset() {
	*x = GetBlockDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockDetailsRequest) ProtoMessage() {}

func (x *GetBlockDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetBlockDetailsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{10}
}

func (x *GetBlockDetailsRequest) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *GetBlockDetailsRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type GetBlockDetailsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	// Types that are assignable to Block:
	//	*GetBlockDetailsReply_EthBlock
	//	*GetBlockDetailsReply_BtcBlock
	//	*GetBlockDetailsReply_DotBlock
	Block isGetBlockDetailsReply_Block `protobuf_oneof:"block"`
}

func (x *GetBlockDetailsReply) Reset() {
	*x = GetBlockDetailsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockDetailsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockDetailsReply) ProtoMessage() {}

func (x *GetBlockDetailsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockDetailsReply.ProtoReflect.Descriptor instead.
func (*GetBlockDetailsReply) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{11}
}

func (x *GetBlockDetailsReply) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (m *GetBlockDetailsReply) GetBlock() isGetBlockDetailsReply_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *GetBlockDetailsReply) GetEthBlock() *EthBlockHeader {
	if x, ok := x.GetBlock().(*GetBlockDetailsReply_EthBlock); ok {
		return x.EthBlock
	}
	return nil
}

func (x *GetBlockDetailsReply) GetBtcBlock() *BtcBlockHeader {
	if x, ok := x.GetBlock().(*GetBlockDetailsReply_BtcBlock); ok {
		return x.BtcBlock
	}
	return nil
}

func (x *GetBlockDetailsReply) GetDotBlock() *DotBlockHeader {
	if x, ok := x.GetBlock().(*GetBlockDetailsReply_DotBlock); ok {
		return x.DotBlock
	}
	return nil
}

type isGetBlockDetailsReply_Block interface {
	isGetBlockDetailsReply_Block()
}

type GetBlockDetailsReply_EthBlock struct {
	EthBlock *EthBlockHeader `protobuf:"bytes,2,opt,name=eth_block,json=ethBlock,proto3,oneof"`
}

type GetBlockDetailsReply_BtcBlock struct {
	BtcBlock *BtcBlockHeader `protobuf:"bytes,3,opt,name=btc_block,json=btcBlock,proto3,oneof"`
}

type GetBlockDetailsReply_DotBlock struct {
	DotBlock *DotBlockHeader `protobuf:"bytes,4,opt,name=dot_block,json=dotBlock,proto3,oneof"`
}

func (*GetBlockDetailsReply_EthBlock) isGetBlockDetailsReply_Block() {}

func (*GetBlockDetailsReply_BtcBlock) isGetBlockDetailsReply_Block() {}

func (*GetBlockDetailsReply_DotBlock) isGetBlockDetailsReply_Block() {}

type GetTransactionDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName  string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	TransactionHash string `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *GetTransactionDetailsRequest) Reset() {
	*x = GetTransactionDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailsRequest) ProtoMessage() {}

func (x *GetTransactionDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{12}
}

func (x *GetTransactionDetailsRequest) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *GetTransactionDetailsRequest) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type GetTransactionDetailsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	// Types that are assignable to Transaction:
	//	*GetTransactionDetailsReply_EthTransaction
	//	*GetTransactionDetailsReply_BtcTransaction
	//	*GetTransactionDetailsReply_DotTransaction
	Transaction isGetTransactionDetailsReply_Transaction `protobuf_oneof:"transaction"`
}

func (x *GetTransactionDetailsReply) Reset() {
	*x = GetTransactionDetailsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailsReply) ProtoMessage() {}

func (x *GetTransactionDetailsReply) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailsReply.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailsReply) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{13}
}

func (x *GetTransactionDetailsReply) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (m *GetTransactionDetailsReply) GetTransaction() isGetTransactionDetailsReply_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *GetTransactionDetailsReply) GetEthTransaction() *EthTransaction {
	if x, ok := x.GetTransaction().(*GetTransactionDetailsReply_EthTransaction); ok {
		return x.EthTransaction
	}
	return nil
}

func (x *GetTransactionDetailsReply) GetBtcTransaction() *BtcTransaction {
	if x, ok := x.GetTransaction().(*GetTransactionDetailsReply_BtcTransaction); ok {
		return x.BtcTransaction
	}
	return nil
}

func (x *GetTransactionDetailsReply) GetDotTransaction() *DotTransaction {
	if x, ok := x.GetTransaction().(*GetTransactionDetailsReply_DotTransaction); ok {
		return x.DotTransaction
	}
	return nil
}

type isGetTransactionDetailsReply_Transaction interface {
	isGetTransactionDetailsReply_Transaction()
}

type GetTransactionDetailsReply_EthTransaction struct {
	EthTransaction *EthTransaction `protobuf:"bytes,2,opt,name=eth_transaction,json=ethTransaction,proto3,oneof"`
}

type GetTransactionDetailsReply_BtcTransaction struct {
	BtcTransaction *BtcTransaction `protobuf:"bytes,3,opt,name=btc_transaction,json=btcTransaction,proto3,oneof"`
}

type GetTransactionDetailsReply_DotTransaction struct {
	DotTransaction *DotTransaction `protobuf:"bytes,4,opt,name=dot_transaction,json=dotTransaction,proto3,oneof"`
}

func (*GetTransactionDetailsReply_EthTransaction) isGetTransactionDetailsReply_Transaction() {}

func (*GetTransactionDetailsReply_BtcTransaction) isGetTransactionDetailsReply_Transaction() {}

func (*GetTransactionDetailsReply_DotTransaction) isGetTransactionDetailsReply_Transaction() {}

type GetLatestBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName []string `protobuf:"bytes,1,rep,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	PageIndex      uint32   `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize       uint32   `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetLatestBlocksRequest) Reset() {
	*x = GetLatestBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestBlocksRequest) ProtoMessage() {}

func (x *GetLatestBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetLatestBlocksRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{14}
}

func (x *GetLatestBlocksRequest) GetBlockchainName() []string {
	if x != nil {
		return x.BlockchainName
	}
	return nil
}

func (x *GetLatestBlocksRequest) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetLatestBlocksRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetLatestTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName []string `protobuf:"bytes,1,rep,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	PageIndex      uint32   `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize       uint32   `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetLatestTransactionsRequest) Reset() {
	*x = GetLatestTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_indexer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTransactionsRequest) ProtoMessage() {}

func (x *GetLatestTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_indexer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetLatestTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_indexer_proto_rawDescGZIP(), []int{15}
}

func (x *GetLatestTransactionsRequest) GetBlockchainName() []string {
	if x != nil {
		return x.BlockchainName
	}
	return nil
}

func (x *GetLatestTransactionsRequest) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetLatestTransactionsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_transaction_indexer_proto protoreflect.FileDescriptor

var file_transaction_indexer_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x39, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x57, 0x0a, 0x13,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73,
	0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x3d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x64, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x65,
	0x74, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x43, 0x0a, 0x09, 0x62, 0x74, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x74, 0x63, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x62, 0x74, 0x63,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x44, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x72, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc7, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x0f, 0x62, 0x74, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0e, 0x62, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x64, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x44, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x7d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x83, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2a, 0x4f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x32, 0xc8, 0x09, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x6e,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x86,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7a, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x75, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x83,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x78, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x7c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x42, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_indexer_proto_rawDescOnce sync.Once
	file_transaction_indexer_proto_rawDescData = file_transaction_indexer_proto_rawDesc
)

func file_transaction_indexer_proto_rawDescGZIP() []byte {
	file_transaction_indexer_proto_rawDescOnce.Do(func() {
		file_transaction_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_indexer_proto_rawDescData)
	})
	return file_transaction_indexer_proto_rawDescData
}

var file_transaction_indexer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_transaction_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_transaction_indexer_proto_goTypes = []interface{}{
	(TransactionType)(0),                       // 0: com.clover.extractor.TransactionType
	(*SimpleTransaction)(nil),                  // 1: com.clover.extractor.SimpleTransaction
	(*MoneyTransferTransaction)(nil),           // 2: com.clover.extractor.MoneyTransferTransaction
	(*SimpleBlock)(nil),                        // 3: com.clover.extractor.SimpleBlock
	(*GetTxsByAddressRequest)(nil),             // 4: com.clover.extractor.GetTxsByAddressRequest
	(*GetTxsByAddressAndTimeRequest)(nil),      // 5: com.clover.extractor.GetTxsByAddressAndTimeRequest
	(*SimpleTransactionsReply)(nil),            // 6: com.clover.extractor.SimpleTransactionsReply
	(*MoneyTransfersReply)(nil),                // 7: com.clover.extractor.MoneyTransfersReply
	(*GetTxsByHeightAndBlockchainRequest)(nil), // 8: com.clover.extractor.GetTxsByHeightAndBlockchainRequest
	(*GetBlocksByHeightRequest)(nil),           // 9: com.clover.extractor.GetBlocksByHeightRequest
	(*SimpleBlocksReply)(nil),                  // 10: com.clover.extractor.SimpleBlocksReply
	(*GetBlockDetailsRequest)(nil),             // 11: com.clover.extractor.GetBlockDetailsRequest
	(*GetBlockDetailsReply)(nil),               // 12: com.clover.extractor.GetBlockDetailsReply
	(*GetTransactionDetailsRequest)(nil),       // 13: com.clover.extractor.GetTransactionDetailsRequest
	(*GetTransactionDetailsReply)(nil),         // 14: com.clover.extractor.GetTransactionDetailsReply
	(*GetLatestBlocksRequest)(nil),             // 15: com.clover.extractor.GetLatestBlocksRequest
	(*GetLatestTransactionsRequest)(nil),       // 16: com.clover.extractor.GetLatestTransactionsRequest
	(*EthBlockHeader)(nil),                     // 17: com.clover.extractor.EthBlockHeader
	(*BtcBlockHeader)(nil),                     // 18: com.clover.extractor.BtcBlockHeader
	(*DotBlockHeader)(nil),                     // 19: com.clover.extractor.DotBlockHeader
	(*EthTransaction)(nil),                     // 20: com.clover.extractor.EthTransaction
	(*BtcTransaction)(nil),                     // 21: com.clover.extractor.BtcTransaction
	(*DotTransaction)(nil),                     // 22: com.clover.extractor.DotTransaction
}
var file_transaction_indexer_proto_depIdxs = []int32{
	0,  // 0: com.clover.extractor.SimpleTransaction.type:type_name -> com.clover.extractor.TransactionType
	1,  // 1: com.clover.extractor.SimpleTransactionsReply.txs:type_name -> com.clover.extractor.SimpleTransaction
	2,  // 2: com.clover.extractor.MoneyTransfersReply.txs:type_name -> com.clover.extractor.MoneyTransferTransaction
	3,  // 3: com.clover.extractor.SimpleBlocksReply.blocks:type_name -> com.clover.extractor.SimpleBlock
	17, // 4: com.clover.extractor.GetBlockDetailsReply.eth_block:type_name -> com.clover.extractor.EthBlockHeader
	18, // 5: com.clover.extractor.GetBlockDetailsReply.btc_block:type_name -> com.clover.extractor.BtcBlockHeader
	19, // 6: com.clover.extractor.GetBlockDetailsReply.dot_block:type_name -> com.clover.extractor.DotBlockHeader
	20, // 7: com.clover.extractor.GetTransactionDetailsReply.eth_transaction:type_name -> com.clover.extractor.EthTransaction
	21, // 8: com.clover.extractor.GetTransactionDetailsReply.btc_transaction:type_name -> com.clover.extractor.BtcTransaction
	22, // 9: com.clover.extractor.GetTransactionDetailsReply.dot_transaction:type_name -> com.clover.extractor.DotTransaction
	4,  // 10: com.clover.extractor.TransactionIndexer.GetTxsByAddress:input_type -> com.clover.extractor.GetTxsByAddressRequest
	8,  // 11: com.clover.extractor.TransactionIndexer.GetTxsByHeightAndBlockchain:input_type -> com.clover.extractor.GetTxsByHeightAndBlockchainRequest
	9,  // 12: com.clover.extractor.TransactionIndexer.GetBlocksByHeight:input_type -> com.clover.extractor.GetBlocksByHeightRequest
	11, // 13: com.clover.extractor.TransactionIndexer.GetBlockDetails:input_type -> com.clover.extractor.GetBlockDetailsRequest
	13, // 14: com.clover.extractor.TransactionIndexer.GetTransactionDetails:input_type -> com.clover.extractor.GetTransactionDetailsRequest
	15, // 15: com.clover.extractor.TransactionIndexer.GetLatestBlocks:input_type -> com.clover.extractor.GetLatestBlocksRequest
	16, // 16: com.clover.extractor.TransactionIndexer.GetLatestTransactions:input_type -> com.clover.extractor.GetLatestTransactionsRequest
	4,  // 17: com.clover.extractor.TransactionIndexer.GetMoneyTransfersByAddress:input_type -> com.clover.extractor.GetTxsByAddressRequest
	5,  // 18: com.clover.extractor.TransactionIndexer.GetMoneyTransfersByAddressAndTime:input_type -> com.clover.extractor.GetTxsByAddressAndTimeRequest
	5,  // 19: com.clover.extractor.TransactionIndexer.GetTxsByAddressAndTime:input_type -> com.clover.extractor.GetTxsByAddressAndTimeRequest
	6,  // 20: com.clover.extractor.TransactionIndexer.GetTxsByAddress:output_type -> com.clover.extractor.SimpleTransactionsReply
	6,  // 21: com.clover.extractor.TransactionIndexer.GetTxsByHeightAndBlockchain:output_type -> com.clover.extractor.SimpleTransactionsReply
	10, // 22: com.clover.extractor.TransactionIndexer.GetBlocksByHeight:output_type -> com.clover.extractor.SimpleBlocksReply
	12, // 23: com.clover.extractor.TransactionIndexer.GetBlockDetails:output_type -> com.clover.extractor.GetBlockDetailsReply
	14, // 24: com.clover.extractor.TransactionIndexer.GetTransactionDetails:output_type -> com.clover.extractor.GetTransactionDetailsReply
	10, // 25: com.clover.extractor.TransactionIndexer.GetLatestBlocks:output_type -> com.clover.extractor.SimpleBlocksReply
	6,  // 26: com.clover.extractor.TransactionIndexer.GetLatestTransactions:output_type -> com.clover.extractor.SimpleTransactionsReply
	7,  // 27: com.clover.extractor.TransactionIndexer.GetMoneyTransfersByAddress:output_type -> com.clover.extractor.MoneyTransfersReply
	7,  // 28: com.clover.extractor.TransactionIndexer.GetMoneyTransfersByAddressAndTime:output_type -> com.clover.extractor.MoneyTransfersReply
	6,  // 29: com.clover.extractor.TransactionIndexer.GetTxsByAddressAndTime:output_type -> com.clover.extractor.SimpleTransactionsReply
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_transaction_indexer_proto_init() }
func file_transaction_indexer_proto_init() {
	if File_transaction_indexer_proto != nil {
		return
	}
	file_extractor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transaction_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyTransferTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxsByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxsByAddressAndTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTransactionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyTransfersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxsByHeightAndBlockchainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleBlocksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockDetailsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_indexer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transaction_indexer_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetBlockDetailsReply_EthBlock)(nil),
		(*GetBlockDetailsReply_BtcBlock)(nil),
		(*GetBlockDetailsReply_DotBlock)(nil),
	}
	file_transaction_indexer_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GetTransactionDetailsReply_EthTransaction)(nil),
		(*GetTransactionDetailsReply_BtcTransaction)(nil),
		(*GetTransactionDetailsReply_DotTransaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_indexer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_indexer_proto_goTypes,
		DependencyIndexes: file_transaction_indexer_proto_depIdxs,
		EnumInfos:         file_transaction_indexer_proto_enumTypes,
		MessageInfos:      file_transaction_indexer_proto_msgTypes,
	}.Build()
	File_transaction_indexer_proto = out.File
	file_transaction_indexer_proto_rawDesc = nil
	file_transaction_indexer_proto_goTypes = nil
	file_transaction_indexer_proto_depIdxs = nil
}
