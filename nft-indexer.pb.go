// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: nft-indexer.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NftMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName  string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	ContractAddress []byte `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenId         []byte `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *NftMetadata) Reset() {
	*x = NftMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftMetadata) ProtoMessage() {}

func (x *NftMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_nft_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftMetadata.ProtoReflect.Descriptor instead.
func (*NftMetadata) Descriptor() ([]byte, []int) {
	return file_nft_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *NftMetadata) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (x *NftMetadata) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *NftMetadata) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

type Nft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftMetadata []byte `protobuf:"bytes,1,opt,name=nft_metadata,json=nftMetadata,proto3" json:"nft_metadata,omitempty"`
	Content     []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // attributes, etc...
}

func (x *Nft) Reset() {
	*x = Nft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nft) ProtoMessage() {}

func (x *Nft) ProtoReflect() protoreflect.Message {
	mi := &file_nft_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nft.ProtoReflect.Descriptor instead.
func (*Nft) Descriptor() ([]byte, []int) {
	return file_nft_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *Nft) GetNftMetadata() []byte {
	if x != nil {
		return x.NftMetadata
	}
	return nil
}

func (x *Nft) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type NftTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftMetadata *NftMetadata `protobuf:"bytes,1,opt,name=nft_metadata,json=nftMetadata,proto3" json:"nft_metadata,omitempty"`
	From        []byte       `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To          []byte       `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value       []byte       `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NftTransfer) Reset() {
	*x = NftTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftTransfer) ProtoMessage() {}

func (x *NftTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_nft_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftTransfer.ProtoReflect.Descriptor instead.
func (*NftTransfer) Descriptor() ([]byte, []int) {
	return file_nft_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *NftTransfer) GetNftMetadata() *NftMetadata {
	if x != nil {
		return x.NftMetadata
	}
	return nil
}

func (x *NftTransfer) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *NftTransfer) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *NftTransfer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type NftBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftMetadata *NftMetadata `protobuf:"bytes,1,opt,name=nft_metadata,json=nftMetadata,proto3" json:"nft_metadata,omitempty"`
	Wallet      []byte       `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Value       []byte       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NftBalance) Reset() {
	*x = NftBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftBalance) ProtoMessage() {}

func (x *NftBalance) ProtoReflect() protoreflect.Message {
	mi := &file_nft_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftBalance.ProtoReflect.Descriptor instead.
func (*NftBalance) Descriptor() ([]byte, []int) {
	return file_nft_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *NftBalance) GetNftMetadata() *NftMetadata {
	if x != nil {
		return x.NftMetadata
	}
	return nil
}

func (x *NftBalance) GetWallet() []byte {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *NftBalance) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_nft_indexer_proto protoreflect.FileDescriptor

var file_nft_indexer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x66, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x72, 0x73, 0x63, 0x61,
	0x6e, 0x2e, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x0b,
	0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x03, 0x4e, 0x66,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x90,
	0x01, 0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x72, 0x73,
	0x63, 0x61, 0x6e, 0x2e, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4e,
	0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x4e, 0x66, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x72, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6e, 0x66,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0f, 0x4e,
	0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x08,
	0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_indexer_proto_rawDescOnce sync.Once
	file_nft_indexer_proto_rawDescData = file_nft_indexer_proto_rawDesc
)

func file_nft_indexer_proto_rawDescGZIP() []byte {
	file_nft_indexer_proto_rawDescOnce.Do(func() {
		file_nft_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_indexer_proto_rawDescData)
	})
	return file_nft_indexer_proto_rawDescData
}

var file_nft_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nft_indexer_proto_goTypes = []interface{}{
	(*NftMetadata)(nil), // 0: com.ankrscan.nftindexer.NftMetadata
	(*Nft)(nil),         // 1: com.ankrscan.nftindexer.Nft
	(*NftTransfer)(nil), // 2: com.ankrscan.nftindexer.NftTransfer
	(*NftBalance)(nil),  // 3: com.ankrscan.nftindexer.NftBalance
}
var file_nft_indexer_proto_depIdxs = []int32{
	0, // 0: com.ankrscan.nftindexer.NftTransfer.nft_metadata:type_name -> com.ankrscan.nftindexer.NftMetadata
	0, // 1: com.ankrscan.nftindexer.NftBalance.nft_metadata:type_name -> com.ankrscan.nftindexer.NftMetadata
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_nft_indexer_proto_init() }
func file_nft_indexer_proto_init() {
	if File_nft_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nft_indexer_proto_goTypes,
		DependencyIndexes: file_nft_indexer_proto_depIdxs,
		MessageInfos:      file_nft_indexer_proto_msgTypes,
	}.Build()
	File_nft_indexer_proto = out.File
	file_nft_indexer_proto_rawDesc = nil
	file_nft_indexer_proto_goTypes = nil
	file_nft_indexer_proto_depIdxs = nil
}
