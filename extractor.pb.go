// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: extractor.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EthTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash  string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight      uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	GasPrice         string `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit         uint64 `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce            uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TransactionFee   string `protobuf:"bytes,7,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	Value            string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	FromAddress      string `protobuf:"bytes,9,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress        string `protobuf:"bytes,10,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Timestamp        uint64 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RawInputData     string `protobuf:"bytes,12,opt,name=raw_input_data,json=rawInputData,proto3" json:"raw_input_data,omitempty"`
	TransactionIndex uint32 `protobuf:"varint,13,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	GasUsed          uint64 `protobuf:"varint,14,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Status           uint64 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EthTransaction) Reset() {
	*x = EthTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthTransaction) ProtoMessage() {}

func (x *EthTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthTransaction.ProtoReflect.Descriptor instead.
func (*EthTransaction) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{0}
}

func (x *EthTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *EthTransaction) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *EthTransaction) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthTransaction) GetTransactionFee() string {
	if x != nil {
		return x.TransactionFee
	}
	return ""
}

func (x *EthTransaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthTransaction) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *EthTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EthTransaction) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EthTransaction) GetRawInputData() string {
	if x != nil {
		return x.RawInputData
	}
	return ""
}

func (x *EthTransaction) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthTransaction) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthTransaction) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type EthBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight       uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp         uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MineAddress       string `protobuf:"bytes,4,opt,name=mine_address,json=mineAddress,proto3" json:"mine_address,omitempty"`
	Size              uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	GasUsed           uint64 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	ExtraData         string `protobuf:"bytes,7,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BlockHash         string `protobuf:"bytes,8,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	ParentHash        string `protobuf:"bytes,9,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Sha3Uncles        string `protobuf:"bytes,10,opt,name=sha3_uncles,json=sha3Uncles,proto3" json:"sha3_uncles,omitempty"`
	StateRoot         string `protobuf:"bytes,11,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	TransactionsCount uint64 `protobuf:"varint,12,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count,omitempty"`
}

func (x *EthBlockHeader) Reset() {
	*x = EthBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthBlockHeader) ProtoMessage() {}

func (x *EthBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthBlockHeader.ProtoReflect.Descriptor instead.
func (*EthBlockHeader) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{1}
}

func (x *EthBlockHeader) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *EthBlockHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EthBlockHeader) GetMineAddress() string {
	if x != nil {
		return x.MineAddress
	}
	return ""
}

func (x *EthBlockHeader) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EthBlockHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthBlockHeader) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *EthBlockHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthBlockHeader) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *EthBlockHeader) GetSha3Uncles() string {
	if x != nil {
		return x.Sha3Uncles
	}
	return ""
}

func (x *EthBlockHeader) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthBlockHeader) GetTransactionsCount() uint64 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

type EthBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs    []*EthTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	Header *EthBlockHeader   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *EthBlock) Reset() {
	*x = EthBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthBlock) ProtoMessage() {}

func (x *EthBlock) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthBlock.ProtoReflect.Descriptor instead.
func (*EthBlock) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{2}
}

func (x *EthBlock) GetTxs() []*EthTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *EthBlock) GetHeader() *EthBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type BtcBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight       uint64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp         uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockHash         string  `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	ParentHash        string  `protobuf:"bytes,4,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	MerkleRoot        string  `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Bits              string  `protobuf:"bytes,6,opt,name=bits,proto3" json:"bits,omitempty"`
	Nonce             uint32  `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Difficulty        float64 `protobuf:"fixed64,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Size              int32   `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	Weight            int32   `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Version           string  `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	TransactionsCount uint64  `protobuf:"varint,13,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count,omitempty"`
}

func (x *BtcBlockHeader) Reset() {
	*x = BtcBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcBlockHeader) ProtoMessage() {}

func (x *BtcBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcBlockHeader.ProtoReflect.Descriptor instead.
func (*BtcBlockHeader) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{3}
}

func (x *BtcBlockHeader) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BtcBlockHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BtcBlockHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BtcBlockHeader) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BtcBlockHeader) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *BtcBlockHeader) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *BtcBlockHeader) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BtcBlockHeader) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *BtcBlockHeader) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BtcBlockHeader) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BtcBlockHeader) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BtcBlockHeader) GetTransactionsCount() uint64 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

type BtcTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string                 `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight     uint64                 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp       uint64                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Size            int32                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Weight          int32                  `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Vin             []*BtcTransaction_Vin  `protobuf:"bytes,6,rep,name=vin,proto3" json:"vin,omitempty"`
	Vout            []*BtcTransaction_Vout `protobuf:"bytes,7,rep,name=vout,proto3" json:"vout,omitempty"`
}

func (x *BtcTransaction) Reset() {
	*x = BtcTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransaction) ProtoMessage() {}

func (x *BtcTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransaction.ProtoReflect.Descriptor instead.
func (*BtcTransaction) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{4}
}

func (x *BtcTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *BtcTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BtcTransaction) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BtcTransaction) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BtcTransaction) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BtcTransaction) GetVin() []*BtcTransaction_Vin {
	if x != nil {
		return x.Vin
	}
	return nil
}

func (x *BtcTransaction) GetVout() []*BtcTransaction_Vout {
	if x != nil {
		return x.Vout
	}
	return nil
}

type BtcBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs    []*BtcTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	Header *BtcBlockHeader   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *BtcBlock) Reset() {
	*x = BtcBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcBlock) ProtoMessage() {}

func (x *BtcBlock) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcBlock.ProtoReflect.Descriptor instead.
func (*BtcBlock) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{5}
}

func (x *BtcBlock) GetTxs() []*BtcTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *BtcBlock) GetHeader() *BtcBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

//*
// Topic: v1.blockchainextractor.blockchanged
type BlockChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainName string `protobuf:"bytes,1,opt,name=blockchain_name,json=blockchainName,proto3" json:"blockchain_name,omitempty"`
	// Types that are assignable to Block:
	//	*BlockChanged_EthBlock
	//	*BlockChanged_BtcBlock
	Block isBlockChanged_Block `protobuf_oneof:"block"`
}

func (x *BlockChanged) Reset() {
	*x = BlockChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockChanged) ProtoMessage() {}

func (x *BlockChanged) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockChanged.ProtoReflect.Descriptor instead.
func (*BlockChanged) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{6}
}

func (x *BlockChanged) GetBlockchainName() string {
	if x != nil {
		return x.BlockchainName
	}
	return ""
}

func (m *BlockChanged) GetBlock() isBlockChanged_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *BlockChanged) GetEthBlock() *EthBlock {
	if x, ok := x.GetBlock().(*BlockChanged_EthBlock); ok {
		return x.EthBlock
	}
	return nil
}

func (x *BlockChanged) GetBtcBlock() *BtcBlock {
	if x, ok := x.GetBlock().(*BlockChanged_BtcBlock); ok {
		return x.BtcBlock
	}
	return nil
}

type isBlockChanged_Block interface {
	isBlockChanged_Block()
}

type BlockChanged_EthBlock struct {
	EthBlock *EthBlock `protobuf:"bytes,2,opt,name=eth_block,json=ethBlock,proto3,oneof"`
}

type BlockChanged_BtcBlock struct {
	BtcBlock *BtcBlock `protobuf:"bytes,3,opt,name=btc_block,json=btcBlock,proto3,oneof"`
}

func (*BlockChanged_EthBlock) isBlockChanged_Block() {}

func (*BlockChanged_BtcBlock) isBlockChanged_Block() {}

type BtcTransaction_ScriptPubKeyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqSigs   int32    `protobuf:"varint,3,opt,name=req_sigs,json=reqSigs,proto3" json:"req_sigs,omitempty"`
	Type      string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Addresses []string `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *BtcTransaction_ScriptPubKeyResult) Reset() {
	*x = BtcTransaction_ScriptPubKeyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransaction_ScriptPubKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransaction_ScriptPubKeyResult) ProtoMessage() {}

func (x *BtcTransaction_ScriptPubKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransaction_ScriptPubKeyResult.ProtoReflect.Descriptor instead.
func (*BtcTransaction_ScriptPubKeyResult) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BtcTransaction_ScriptPubKeyResult) GetReqSigs() int32 {
	if x != nil {
		return x.ReqSigs
	}
	return 0
}

func (x *BtcTransaction_ScriptPubKeyResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BtcTransaction_ScriptPubKeyResult) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type BtcTransaction_Vin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCoinbase bool   `protobuf:"varint,1,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
	Txid       string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout       uint32 `protobuf:"varint,3,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *BtcTransaction_Vin) Reset() {
	*x = BtcTransaction_Vin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransaction_Vin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransaction_Vin) ProtoMessage() {}

func (x *BtcTransaction_Vin) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransaction_Vin.ProtoReflect.Descriptor instead.
func (*BtcTransaction_Vin) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BtcTransaction_Vin) GetIsCoinbase() bool {
	if x != nil {
		return x.IsCoinbase
	}
	return false
}

func (x *BtcTransaction_Vin) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *BtcTransaction_Vin) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type BtcTransaction_Vout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        uint64                             `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	N            uint32                             `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	ScriptPubKey *BtcTransaction_ScriptPubKeyResult `protobuf:"bytes,3,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
}

func (x *BtcTransaction_Vout) Reset() {
	*x = BtcTransaction_Vout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extractor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransaction_Vout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransaction_Vout) ProtoMessage() {}

func (x *BtcTransaction_Vout) ProtoReflect() protoreflect.Message {
	mi := &file_extractor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransaction_Vout.ProtoReflect.Descriptor instead.
func (*BtcTransaction_Vout) Descriptor() ([]byte, []int) {
	return file_extractor_proto_rawDescGZIP(), []int{4, 2}
}

func (x *BtcTransaction_Vout) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BtcTransaction_Vout) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *BtcTransaction_Vout) GetScriptPubKey() *BtcTransaction_ScriptPubKeyResult {
	if x != nil {
		return x.ScriptPubKey
	}
	return nil
}

var File_extractor_proto protoreflect.FileDescriptor

var file_extractor_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf1, 0x02,
	0x0a, 0x0e, 0x45, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x33, 0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x33, 0x55, 0x6e, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36,
	0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x74,
	0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0xf1, 0x02, 0x0a, 0x0e, 0x42, 0x74, 0x63, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe2, 0x04, 0x0a, 0x0e, 0x42, 0x74, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x6e, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12,
	0x3d, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x1a, 0x61,
	0x0a, 0x12, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x69, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x53, 0x69, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0x4e, 0x0a, 0x03, 0x56, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75,
	0x74, 0x1a, 0x89, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x5d,
	0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x74,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x80, 0x01,
	0x0a, 0x08, 0x42, 0x74, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x03, 0x74, 0x78,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74,
	0x78, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x74, 0x63, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x74,
	0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x74, 0x63,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x74, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x74, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_extractor_proto_rawDescOnce sync.Once
	file_extractor_proto_rawDescData = file_extractor_proto_rawDesc
)

func file_extractor_proto_rawDescGZIP() []byte {
	file_extractor_proto_rawDescOnce.Do(func() {
		file_extractor_proto_rawDescData = protoimpl.X.CompressGZIP(file_extractor_proto_rawDescData)
	})
	return file_extractor_proto_rawDescData
}

var file_extractor_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_extractor_proto_goTypes = []interface{}{
	(*EthTransaction)(nil),                    // 0: com.clover.extractor.EthTransaction
	(*EthBlockHeader)(nil),                    // 1: com.clover.extractor.EthBlockHeader
	(*EthBlock)(nil),                          // 2: com.clover.extractor.EthBlock
	(*BtcBlockHeader)(nil),                    // 3: com.clover.extractor.BtcBlockHeader
	(*BtcTransaction)(nil),                    // 4: com.clover.extractor.BtcTransaction
	(*BtcBlock)(nil),                          // 5: com.clover.extractor.BtcBlock
	(*BlockChanged)(nil),                      // 6: com.clover.extractor.BlockChanged
	(*BtcTransaction_ScriptPubKeyResult)(nil), // 7: com.clover.extractor.BtcTransaction.ScriptPubKeyResult
	(*BtcTransaction_Vin)(nil),                // 8: com.clover.extractor.BtcTransaction.Vin
	(*BtcTransaction_Vout)(nil),               // 9: com.clover.extractor.BtcTransaction.Vout
}
var file_extractor_proto_depIdxs = []int32{
	0, // 0: com.clover.extractor.EthBlock.txs:type_name -> com.clover.extractor.EthTransaction
	1, // 1: com.clover.extractor.EthBlock.header:type_name -> com.clover.extractor.EthBlockHeader
	8, // 2: com.clover.extractor.BtcTransaction.vin:type_name -> com.clover.extractor.BtcTransaction.Vin
	9, // 3: com.clover.extractor.BtcTransaction.vout:type_name -> com.clover.extractor.BtcTransaction.Vout
	4, // 4: com.clover.extractor.BtcBlock.txs:type_name -> com.clover.extractor.BtcTransaction
	3, // 5: com.clover.extractor.BtcBlock.header:type_name -> com.clover.extractor.BtcBlockHeader
	2, // 6: com.clover.extractor.BlockChanged.eth_block:type_name -> com.clover.extractor.EthBlock
	5, // 7: com.clover.extractor.BlockChanged.btc_block:type_name -> com.clover.extractor.BtcBlock
	7, // 8: com.clover.extractor.BtcTransaction.Vout.script_pub_key:type_name -> com.clover.extractor.BtcTransaction.ScriptPubKeyResult
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_extractor_proto_init() }
func file_extractor_proto_init() {
	if File_extractor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_extractor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransaction_ScriptPubKeyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransaction_Vin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extractor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransaction_Vout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_extractor_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*BlockChanged_EthBlock)(nil),
		(*BlockChanged_BtcBlock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_extractor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_extractor_proto_goTypes,
		DependencyIndexes: file_extractor_proto_depIdxs,
		MessageInfos:      file_extractor_proto_msgTypes,
	}.Build()
	File_extractor_proto = out.File
	file_extractor_proto_rawDesc = nil
	file_extractor_proto_goTypes = nil
	file_extractor_proto_depIdxs = nil
}
