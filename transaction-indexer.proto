syntax = "proto3";

package com.clover.extractor;

option java_package = "com.clover.proto";
option java_outer_classname = "ExtractorProto";
import "extractor.proto";
option go_package = "./;proto";

/**
 *  _____       _   _ _   _
 * | ____|_ __ | |_(_) |_(_) ___  ___
 * |  _| | '_ \| __| | __| |/ _ \/ __|
 * | |___| | | | |_| | |_| |  __/\__ \
 * |_____|_| |_|\__|_|\__|_|\___||___/
 *
 **/

message SimpleTransaction {
  string blockchain_name = 1;
  string transaction_hash = 2;
  uint64 block_height = 3;
  string from_address = 4;
  string to_address = 5;
  string value = 6;
  uint64 timestamp = 7;
  bool success = 8;
  string method = 9;
  string id = 10;
  TransactionType type = 11;
}

message MoneyTransferTransaction {
  string blockchain_name = 1;
  string transaction_hash = 2;
  uint64 block_height = 3;
  string from_address = 4;
  string to_address = 5;
  string value = 6;
  uint64 timestamp = 7;
  string contract_address = 8;
  string id = 9;
}

enum TransactionType {
  DefaultTransaction = 0;
  ContractDeploy = 1;
  ContractCall = 2;
}


message SimpleBlock {
  string blockchain_name = 1;
  uint64 block_height = 2;
  uint64 timestamp = 3;
  uint64 transactions_count = 4;
  string id = 5;
}

/**
 *        ____  ____   ____
 *   __ _|  _ \|  _ \ / ___|
 *  / _` | |_) | |_) | |
 * | (_| |  _ <|  __/| |___
 *  \__, |_| \_\_|    \____|
 *  |___/
 *
 **/

service TransactionIndexer {
  rpc GetTxsByAddress (GetTxsByAddressRequest) returns (SimpleTransactionsReply);
  rpc GetTxsByHash (GetTxsByHashRequest) returns (SimpleTransactionsReply);
  rpc GetTxsByHeightAndBlockchain (GetTxsByHeightAndBlockchainRequest) returns (SimpleTransactionsReply);
  rpc GetBlocksByHeight (GetBlocksByHeightRequest) returns (SimpleBlocksReply);
  rpc GetBlockDetails (GetBlockDetailsRequest) returns (GetBlockDetailsReply);
  rpc GetTransactionDetails (GetTransactionDetailsRequest) returns (GetTransactionDetailsReply);
  rpc GetLatestBlocks (GetLatestBlocksRequest) returns (SimpleBlocksReply);
  rpc GetLatestTransactions (GetLatestTransactionsRequest) returns (SimpleTransactionsReply);
  rpc GetMoneyTransfersByAddress (GetTxsByAddressRequest) returns (MoneyTransfersReply);

  rpc GetMoneyTransfersByAddressAndTime (GetTxsByAddressAndTimeRequest) returns (MoneyTransfersReply);
  rpc GetTxsByAddressAndTime (GetTxsByAddressAndTimeRequest) returns (SimpleTransactionsReply);
}

message GetTxsByHashRequest {
  string hash = 1;
}

message GetTxsByAddressRequest {
  string address = 1;
  uint32 page_index = 2;
  uint32 page_size = 3;
}

message GetTxsByAddressAndTimeRequest {
  string address = 1;
  uint32 limit = 2;
  uint64 after_timestamp = 3; // get limited amount of transactions by address after timestamp
  string after_id = 4;
}

message SimpleTransactionsReply {
  repeated SimpleTransaction txs = 1;
}

message MoneyTransfersReply {
  repeated MoneyTransferTransaction txs = 1;
}

message GetTxsByHeightAndBlockchainRequest {
  string blockchain_name = 1;
  uint64 block_height = 2;
  uint32 page_index = 3;
  uint32 page_size = 4;
}

message GetBlocksByHeightRequest {
  uint64 block_height = 1;
}

message SimpleBlocksReply {
  repeated SimpleBlock blocks = 1;
}

message GetTransactionDetailsRequest {
  string blockchain_name = 1;
  string transaction_hash = 2;
}

message GetTransactionDetailsReply {
    TransactionDetails details = 1;
    SimpleTransaction simple = 2;
}

message GetLatestBlocksRequest {
  repeated string blockchain_name = 1;
  uint32 page_index = 2;
  uint32 page_size = 3;
}

message GetLatestTransactionsRequest {
  repeated string blockchain_name = 1;
  uint32 page_index = 2;
  uint32 page_size = 3;
}
