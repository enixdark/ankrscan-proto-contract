// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransactionIndexerClient is the client API for TransactionIndexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionIndexerClient interface {
	TransactionStats(ctx context.Context, in *TransactionStatsRequest, opts ...grpc.CallOption) (*TransactionsStats, error)
}

type transactionIndexerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionIndexerClient(cc grpc.ClientConnInterface) TransactionIndexerClient {
	return &transactionIndexerClient{cc}
}

func (c *transactionIndexerClient) TransactionStats(ctx context.Context, in *TransactionStatsRequest, opts ...grpc.CallOption) (*TransactionsStats, error) {
	out := new(TransactionsStats)
	err := c.cc.Invoke(ctx, "/ankrscan.transactionindexer.TransactionIndexer/TransactionStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionIndexerServer is the server API for TransactionIndexer service.
// All implementations must embed UnimplementedTransactionIndexerServer
// for forward compatibility
type TransactionIndexerServer interface {
	TransactionStats(context.Context, *TransactionStatsRequest) (*TransactionsStats, error)
	mustEmbedUnimplementedTransactionIndexerServer()
}

// UnimplementedTransactionIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionIndexerServer struct {
}

func (UnimplementedTransactionIndexerServer) TransactionStats(context.Context, *TransactionStatsRequest) (*TransactionsStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionStats not implemented")
}
func (UnimplementedTransactionIndexerServer) mustEmbedUnimplementedTransactionIndexerServer() {}

// UnsafeTransactionIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionIndexerServer will
// result in compilation errors.
type UnsafeTransactionIndexerServer interface {
	mustEmbedUnimplementedTransactionIndexerServer()
}

func RegisterTransactionIndexerServer(s grpc.ServiceRegistrar, srv TransactionIndexerServer) {
	s.RegisterService(&TransactionIndexer_ServiceDesc, srv)
}

func _TransactionIndexer_TransactionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionIndexerServer).TransactionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankrscan.transactionindexer.TransactionIndexer/TransactionStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionIndexerServer).TransactionStats(ctx, req.(*TransactionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionIndexer_ServiceDesc is the grpc.ServiceDesc for TransactionIndexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionIndexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ankrscan.transactionindexer.TransactionIndexer",
	HandlerType: (*TransactionIndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionStats",
			Handler:    _TransactionIndexer_TransactionStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction-indexer.proto",
}
