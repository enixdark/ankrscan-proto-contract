// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamespaceResolverClient is the client API for NamespaceResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceResolverClient interface {
	// internal APIs
	ResolveNamespace(ctx context.Context, in *ResolveNamespaceRequest, opts ...grpc.CallOption) (*ResolveNamespaceReply, error)
}

type namespaceResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceResolverClient(cc grpc.ClientConnInterface) NamespaceResolverClient {
	return &namespaceResolverClient{cc}
}

func (c *namespaceResolverClient) ResolveNamespace(ctx context.Context, in *ResolveNamespaceRequest, opts ...grpc.CallOption) (*ResolveNamespaceReply, error) {
	out := new(ResolveNamespaceReply)
	err := c.cc.Invoke(ctx, "/ankrscan.namespaceresolver.NamespaceResolver/ResolveNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceResolverServer is the server API for NamespaceResolver service.
// All implementations must embed UnimplementedNamespaceResolverServer
// for forward compatibility
type NamespaceResolverServer interface {
	// internal APIs
	ResolveNamespace(context.Context, *ResolveNamespaceRequest) (*ResolveNamespaceReply, error)
	mustEmbedUnimplementedNamespaceResolverServer()
}

// UnimplementedNamespaceResolverServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceResolverServer struct {
}

func (UnimplementedNamespaceResolverServer) ResolveNamespace(context.Context, *ResolveNamespaceRequest) (*ResolveNamespaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveNamespace not implemented")
}
func (UnimplementedNamespaceResolverServer) mustEmbedUnimplementedNamespaceResolverServer() {}

// UnsafeNamespaceResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceResolverServer will
// result in compilation errors.
type UnsafeNamespaceResolverServer interface {
	mustEmbedUnimplementedNamespaceResolverServer()
}

func RegisterNamespaceResolverServer(s grpc.ServiceRegistrar, srv NamespaceResolverServer) {
	s.RegisterService(&NamespaceResolver_ServiceDesc, srv)
}

func _NamespaceResolver_ResolveNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceResolverServer).ResolveNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankrscan.namespaceresolver.NamespaceResolver/ResolveNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceResolverServer).ResolveNamespace(ctx, req.(*ResolveNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespaceResolver_ServiceDesc is the grpc.ServiceDesc for NamespaceResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ankrscan.namespaceresolver.NamespaceResolver",
	HandlerType: (*NamespaceResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveNamespace",
			Handler:    _NamespaceResolver_ResolveNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespace-resolver.proto",
}
