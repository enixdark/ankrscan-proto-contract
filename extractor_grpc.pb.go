// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExtractorClient is the client API for Extractor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtractorClient interface {
	GetLatestBalance(ctx context.Context, in *GetLatestBalanceRequest, opts ...grpc.CallOption) (*GetLatestBalanceReply, error)
	GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*GetTransactionByHashReply, error)
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightReply, error)
}

type extractorClient struct {
	cc grpc.ClientConnInterface
}

func NewExtractorClient(cc grpc.ClientConnInterface) ExtractorClient {
	return &extractorClient{cc}
}

func (c *extractorClient) GetLatestBalance(ctx context.Context, in *GetLatestBalanceRequest, opts ...grpc.CallOption) (*GetLatestBalanceReply, error) {
	out := new(GetLatestBalanceReply)
	err := c.cc.Invoke(ctx, "/com.clover.extractor.Extractor/GetLatestBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractorClient) GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*GetTransactionByHashReply, error) {
	out := new(GetTransactionByHashReply)
	err := c.cc.Invoke(ctx, "/com.clover.extractor.Extractor/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractorClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightReply, error) {
	out := new(GetBlockByHeightReply)
	err := c.cc.Invoke(ctx, "/com.clover.extractor.Extractor/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtractorServer is the server API for Extractor service.
// All implementations must embed UnimplementedExtractorServer
// for forward compatibility
type ExtractorServer interface {
	GetLatestBalance(context.Context, *GetLatestBalanceRequest) (*GetLatestBalanceReply, error)
	GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*GetTransactionByHashReply, error)
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightReply, error)
	mustEmbedUnimplementedExtractorServer()
}

// UnimplementedExtractorServer must be embedded to have forward compatible implementations.
type UnimplementedExtractorServer struct {
}

func (UnimplementedExtractorServer) GetLatestBalance(context.Context, *GetLatestBalanceRequest) (*GetLatestBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBalance not implemented")
}
func (UnimplementedExtractorServer) GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*GetTransactionByHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedExtractorServer) GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedExtractorServer) mustEmbedUnimplementedExtractorServer() {}

// UnsafeExtractorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtractorServer will
// result in compilation errors.
type UnsafeExtractorServer interface {
	mustEmbedUnimplementedExtractorServer()
}

func RegisterExtractorServer(s grpc.ServiceRegistrar, srv ExtractorServer) {
	s.RegisterService(&Extractor_ServiceDesc, srv)
}

func _Extractor_GetLatestBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractorServer).GetLatestBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.clover.extractor.Extractor/GetLatestBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractorServer).GetLatestBalance(ctx, req.(*GetLatestBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extractor_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractorServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.clover.extractor.Extractor/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractorServer).GetTransactionByHash(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extractor_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractorServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.clover.extractor.Extractor/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractorServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Extractor_ServiceDesc is the grpc.ServiceDesc for Extractor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Extractor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.clover.extractor.Extractor",
	HandlerType: (*ExtractorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestBalance",
			Handler:    _Extractor_GetLatestBalance_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Extractor_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _Extractor_GetBlockByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extractor.proto",
}
